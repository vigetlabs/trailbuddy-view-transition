---
import { getCollection } from 'astro:content'
import { slide } from 'astro:transitions'

import Layout from '@layouts/Layout.astro'
import Avatar from '@components/Avatar.astro'
import Metadata from '@components/Metadata/Metadata.astro'

export async function getStaticPaths() {
  const hikeEntries = await getCollection('hikes')

  return hikeEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { Content } = await entry.render()
---

<Layout title={`Trail Buddy Demo | ${entry.data.title}`}>
  <main class="flex flex-col gap-14 pb-14">
    <header
      class:list={[
        'relative mx-auto flex min-h-[calc(100dvh-64px)] max-w-lg flex-col md:min-h-[calc(100dvh-96px)]',
        entry.data.colors.text,
      ]}
      transition:name={`card ${entry.slug} core`}
    >
      <!-- card background -->
      <div
        class:list={['absolute inset-0 -z-10', entry.data.colors.background]}
        transition:name={`card ${entry.slug} background`}
      >
      </div>

      <a
        href="/"
        transition:animate={slide({ duration: '0.5s' })}
        class="focus-visible:outline-inherit absolute left-4 top-3 z-10 flex h-8 items-center rounded-lg bg-shark px-2 text-white hover:bg-shark-hover focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-orange active:bg-shark-active"
      >
        <span class="sr-only">Go Back</span>
        <svg
          class="size-6"
          viewBox="0 0 15 15"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M6.85355 3.14645C7.04882 3.34171 7.04882 3.65829 6.85355 3.85355L3.70711 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H3.70711L6.85355 11.1464C7.04882 11.3417 7.04882 11.6583 6.85355 11.8536C6.65829 12.0488 6.34171 12.0488 6.14645 11.8536L2.14645 7.85355C1.95118 7.65829 1.95118 7.34171 2.14645 7.14645L6.14645 3.14645C6.34171 2.95118 6.65829 2.95118 6.85355 3.14645Z"
            fill="currentColor"
            fill-rule="evenodd"
            clip-rule="evenodd"></path></svg
        ></a
      >

      <div
        class="relative mx-auto flex max-w-6xl flex-col items-center justify-between gap-10 p-8 pb-0"
      >
        <div class="relative">
          <Avatar
            user={entry.data.user}
            postDate={entry.data.postDate}
            slug={entry.slug}
            isStacked
          />
          <button
            class="focus-visible:outline-inherit absolute bottom-0 right-0 top-0 mx-auto flex size-5 -translate-x-1.5 translate-y-5 items-center justify-center rounded-full bg-white text-black focus-visible:outline focus-visible:outline-2 focus-visible:outline-red-orange"
            transition:name={`card ${entry.slug} add`}
            ><svg
              class="size-3"
              viewBox="0 0 15 15"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              ><path
                d="M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z"
                fill="currentColor"
                fill-rule="evenodd"
                clip-rule="evenodd"></path></svg
            ></button
          >
        </div>

        <div class="flex flex-col gap-4 text-center font-sans">
          <div
            class="text-balance flex flex-col"
            transition:name={`card ${entry.slug} heading`}
          >
            <h1 class="text-4xl font-semibold uppercase leading-none">
              {entry.data.title}
            </h1>
            <h2 class="text-xl">
              {entry.data.subtitle}
            </h2>
          </div>

          {entry.data.metadata && <Metadata metadata={entry.data.metadata} />}

          {
            entry.data.description && (
              <p class="text-sm" transition:animate="fade">
                {entry.data.description}
              </p>
            )
          }
        </div>
      </div>
      <div
        class="mt-auto w-full overflow-hidden"
        transition:name={`card ${entry.slug} media box`}
      >
        <video
          class="-my-px"
          poster={`${entry.data.video}-poster.jpg`}
          autoplay
          loop
          muted
          playsinline
          transition:persist={`card ${entry.slug} media`}
        >
          <source src={`${entry.data.video}.webm`} type="video/webm" />
          <source src={`${entry.data.video}.mp4`} type="video/mp4" />
        </video>
        <!-- <Image
          src={`${entry.data.video}-poster.png`}
          alt=""
          class="-my-px"
          width={1745}
          height={1600}
          transition:persist={`card ${entry.slug} media`}
        /> -->
      </div>
    </header>
    <section class="wrapper" transition:animate="fade">
      <div
        class="prose max-w-4xl rounded-3xl border border-black/10 bg-white/80 p-10 py-8 shadow <sm:px-5"
      >
        <Content />
      </div>
    </section>
  </main>
</Layout>
